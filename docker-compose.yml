services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${HTTP_PORT}:${HTTP_PORT}"
      - "${GRPC_PORT}:${GRPC_PORT}"
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - app-network

  postgres:
    image: postgres:15.14-alpine3.21
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_NAME}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_NAME}", "-h", "localhost" ]
      interval: 5s
      timeout: 10s
      retries: 3

  redis:
    image: redis:alpine3.22
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_PORT=${REDIS_PORT}
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "-a", "${REDIS_PASSWORD}", "incr", "ping" ]
      interval: 5s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "${PROMETHEUS_PORT}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
#    command:
#      - '--config.file=/etc/prometheus/prometheus.yml'
#      - '--web.enable-lifecycle'
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge